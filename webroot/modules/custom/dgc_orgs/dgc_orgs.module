<?php

/**
 * @file
 * Contains dgc_orgs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\field\Entity\FieldConfig;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_entity_operation_alter().
 */
function dgc_orgs_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Alter weight and URL for Group Content entities.
  if ($entity->getEntityTypeId() === 'group_content') {

    // Changing the "View Entity" option for media and other entities.
    if (isset($operations['view'])) {
      $operations['view']['weight'] = 9;
      if ($entity->getContentPlugin()->getEntityTypeId() === 'media') {
        $operations['view']['title'] = t('Edit Entity');
      }
    }
    if (isset($operations['delete'])) {
      $operations['delete']['title'] = t('Remove from Group');
    }
    if (isset($operations['edit'])) {
      unset($operations['edit']);
    }
  }
}

/**
 * Implements hook_help().
 */
function dgc_orgs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dgc_orgs module.
    case 'help.page.dgc_orgs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('dgc Organizations') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function dgc_orgs_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Adding redirect submit when saving group content nodes.
  $form_object = $form_state->getFormObject();
  if (is_a($form_object, '\Drupal\Core\Entity\EntityFormInterface') && $form_object->getEntity()->getEntityTypeId() == 'node' && $form_object->getOperation() == 'edit' && GroupContent::loadByEntity($form_object->getEntity())) {
    $form['actions']['submit']['#submit'][] = 'group_content_redirect_submit';
  }
  // Setting group menu as defaults for organization pages.
  if (isset($form['field_menu_link'])) {
    if ($group = \Drupal::routeMatch()->getParameter('group')) {
      if (is_string($group)) {
        $group_menu = 'group-' . $group . '-menu:';
      }
      else {
        $group_menu = 'group-' . $group->id() . '-menu:';
      }
      $suggested_link_name = '';
      $suggested_weight = 1;
      if ($form_state->getFormObject()->getEntity()->bundle() == 'org-group_node-faq') {
        $suggested_link_name = t('FAQ');
        $suggested_weight = 2;
      }
      elseif ($form_state->getFormObject()->getEntity()->bundle() == 'org-group_node-about_page') {
        $suggested_link_name = t('About Us');
      }
      $form['field_menu_link']['widget'][0]['title']['#default_value'] = $suggested_link_name;
      $form['field_menu_link']['widget'][0]['weight']['#default_value'] = $suggested_weight;
      $form['field_menu_link']['widget'][0]['menu']['#open'] = TRUE;
      $form['field_menu_link']['widget'][0]['enabled']['#default_value'] = TRUE;
      $menu_parent = $form['field_menu_link']['widget'][0]['menu_parent'];
      if (isset($menu_parent['#options'][$group_menu])) {
        $form['field_menu_link']['widget'][0]['menu_parent']['#access'] = FALSE;
        $form['field_menu_link']['widget'][0]['menu_parent']['#default_value'] = $group_menu;
      }
    }
  }
  // Add validation for google optimize fields.
  if ($form_id == 'group_study_edit_form' || $form_id == 'group_study_add_form' || $form_id == 'group_org_add_form' || $form_id == 'group_org_edit_form') {
    $form['#validate'][] = '_dgc_orgs_optimize_validate';
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dgc_orgs_group_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'org') {
    // Privacy and terms of use url aliases.
    $alias_manager = \Drupal::service('path.alias_manager');
    $path_storage_service = \Drupal::service('path.alias_storage');
    $org_alias = $alias_manager->getAliasByPath('/group/' . $entity->id());
    // Privacy.
    $privacy_path = '/group/' . $entity->id() . '/privacy';
    if ($alias_manager->getAliasByPath($privacy_path) == $privacy_path) {
      $path_storage_service->save($privacy_path, $org_alias . '/privacy', 'en');
    }
    // Terms of use.
    $terms_path = '/group/' . $entity->id() . '/terms';
    if ($alias_manager->getAliasByPath($terms_path) == $terms_path) {
      $path_storage_service->save($terms_path, $org_alias . '/terms', 'en');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dgc_orgs_menu_insert(EntityInterface $entity) {
  // Adding menu to available menus list for menu link fields.
  $id_parts = explode('-', $entity->id());
  if ($id_parts[0] == 'group' && is_numeric($id_parts[1])) {
    $field_name = 'field_menu_link';
    $entity_field_manager = \Drupal::service('entity_field.manager');
    $menu_link_fields = $entity_field_manager->getFieldMapByFieldType('menu_link');
    foreach ($menu_link_fields['group_content'][$field_name]['bundles'] as $bundle) {
      $field_definitions = $entity_field_manager->getFieldDefinitions('group_content', $bundle);
      $available_menus = $field_definitions[$field_name]->getSetting('available_menus');
      $available_menus[$entity->id()] = $entity->id();
      $field_definitions[$field_name]->setSetting('available_menus', $available_menus);
      $field_definitions[$field_name]->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dgc_orgs_group_content_access(EntityInterface $entity, $operation, $account) {
  if ($operation == 'view') {
    return AccessResult::forbiddenIf(!$entity->getEntity()->access($operation, $account));
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function dgc_orgs_local_tasks_alter(&$local_tasks) {
  // Changed node edit translate title.
  $local_tasks['content_translation.local_tasks:entity.node.content_translation_overview']['title'] = 'Translate Content';
  // Changed node edit link title.
  $local_tasks['entity.node.edit_form']['title'] = 'Edit Content';
  // Change Group content translate link title.
  $local_tasks['content_translation.local_tasks:entity.group_content.content_translation_overview']['title'] = 'Translate menu link';
  // Change Group content edit link title.
  $local_tasks['group_content.edit']['title'] = 'Edit menu link';
  // Adding class to alter node view link.
  $local_tasks['entity.node.canonical']['class'] = '\Drupal\dgc_orgs\Plugin\Menu\NodeViewTab';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function dgc_orgs_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name == 'entity.node.content_translation_overview') {
    unset($data['tabs'][0]['devel.entities:group_content.devel_tab']);
  }
  if ($route_name == 'entity.node.edit_form') {
    unset($data['tabs'][0]['devel.entities:group_content.devel_tab']);
    unset($data['tabs'][0]['group_content.edit_node']);
  }
}

/**
 * Submit function to handle the redirection for group content.
 */
function group_content_redirect_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  $entity = $form_object->getEntity();
  $group_content = GroupContent::loadByEntity($entity);
  $group_content = reset($group_content);
  $form_state->setRedirect("entity.group_content.canonical", ['group_content' => $group_content->id(), 'group' => $group_content->getGroup()->id()]);
}

/**
 * Implements hook_inline_entity_form_reference_form_alter().
 */
function dgc_orgs_inline_entity_form_reference_form_alter(&$reference_form, &$form_state) {
  $form_id = $form_state->getCompleteForm()['#form_id'];
  if ($reference_form['#entity_type'] == 'block_content' &&  ($form_id == 'node_about_page_edit_form' || $form_id == 'node_about_page_form')) {
    // Change title.
    $reference_form['#title'] = t('Add existing contact');
    $reference_form['actions']['ief_reference_save']['#value'] = t('Add contact');
    $options = [];
    $block_types = FieldConfig::loadByName('group', 'org', 'field_contact_block')->getSetting('handler_settings')['target_bundles'];

    // Getting organization contact us block.
    $query = \Drupal::database()->select('block_content_field_data', 'block_content_field_data');
    $query->fields('block_content_field_data', ['id', 'info', 'langcode']);
    $query->join('group__field_contact_block', 'group__field_contact_block', 'block_content_field_data.id = group__field_contact_block.field_contact_block_target_id');
    if ($group = $form_state->get('group')) {
      $query->condition('group__field_contact_block.entity_id', $group->id());
      $query->condition('block_content_field_data.status', 1);
      $query->condition('block_content_field_data.reusable', 1);
      $query->condition('block_content_field_data.type', $block_types, 'IN');
    }
    else {
      /** @var \Drupal\node\NodeForm $node_form */
      $node_form = $form_state->getBuildInfo()['callback_object'];
      $node_id = $node_form->getEntity()->id();
      $query->join('groups_field_data', 'field_contact_block_block_content_field_data', 'group__field_contact_block.entity_id = field_contact_block_block_content_field_data.id');
      $query->join('group_content_field_data', 'group_content_field_data_groups_field_data', 'field_contact_block_block_content_field_data.id = group_content_field_data_groups_field_data.gid');
      $query->leftJoin('group_content__entity_id', 'group_content_field_data_groups_field_data__group_content__entity_id', 'group_content_field_data_groups_field_data.id = group_content_field_data_groups_field_data__group_content__entity_id.entity_id');
      $query->condition('group_content_field_data_groups_field_data__group_content__entity_id.entity_id_target_id', $node_id);
      $query->condition('group_content_field_data_groups_field_data.type', 'org-group_node-about_page');
      $query->condition('group_content_field_data_groups_field_data__group_content__entity_id.deleted', 0);
    }
    $query->condition('block_content_field_data.status', 1);
    $query->condition('block_content_field_data.reusable', 1);
    $query->condition('block_content_field_data.type', $block_types, 'IN');
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      $lang = 'en';
      if (isset($reference_form['#parent_language']) && $reference_form['#parent_language'] != 'und') {
        $lang = $reference_form['#parent_language'];
      }
      if ($result->langcode == $lang) {
        $options[$result->id] = $result->info;
      }
    }
    $reference_form['entity_id']['#title'] = t('Contact');
    $reference_form['entity_id']['#type'] = 'select';
    $reference_form['entity_id']['#options'] = $options;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgc_orgs_form_node_about_page_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['advanced']['#group'] = 'footer';
  if (isset($form['field_contact_section_block']['widget']['actions']['bundle']['#options'])) {
    $block_types = FieldConfig::loadByName('node', 'about_page', 'field_contact_section_block')->getSetting('handler_settings')['target_bundles'];
    $result = array_intersect_key($form['field_contact_section_block']['widget']['actions']['bundle']['#options'], $block_types);
    $form['field_contact_section_block']['widget']['actions']['bundle']['#options'] = $result;

    // Add wrapper item to new item.
    $form['field_contact_section_block']['widget']['actions']['bundle']['#prefix'] = '<div class="vnap-contact-section-add-new-wrapper">';
    $form["field_contact_section_block"]['widget']['actions']['ief_add']['#suffix'] = '</div>';
  }

  // Hide option to delete all entity and not only reference.
  if (isset($form['field_contact_section_block']['widget'])) {
    $form['field_contact_section_block']['widget']['#after_build'][] = '_dgc_orgs_contact_section';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dgc_orgs_form_node_about_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['advanced']['#group'] = 'footer';
  if (isset($form['field_contact_section_block']['widget']['actions']['bundle']['#options'])) {
    $block_types = FieldConfig::loadByName('node', 'about_page', 'field_contact_section_block')->getSetting('handler_settings')['target_bundles'];
    $result = array_intersect_key($form['field_contact_section_block']['widget']['actions']['bundle']['#options'], $block_types);
    $form['field_contact_section_block']['widget']['actions']['bundle']['#options'] = $result;
    // Add wrapper item to new item.
    $form['field_contact_section_block']['widget']['actions']['bundle']['#prefix'] = '<div class="vnap-contact-section-add-new-wrapper">';
    $form['field_contact_section_block']['widget']['actions']['ief_add']['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dgc_orgs_views_pre_render(ViewExecutable $view) {
  if (isset($view) && $view->storage->id() == 'locations_map' && $view->current_display == 'list') {
    $view->element['#attached']['library'][] = 'dgc_orgs/locations-map';
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function dgc_orgs_entity_extra_field_info() {
  $extra = [];

  $extra['paragraph']['about_team']['display']['principle_investigator'] = [
    'label' => t('Principle investigator'),
    'description' => t('First team member'),
    'weight' => 1,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function dgc_orgs_paragraph_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('principle_investigator')) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraph');
    $first_member = $entity->field_about_team_member->first()->entity;
    $build['principle_investigator'] = $view_builder->view($first_member, 'map_team_w_images');
    $build['principle_investigator']['#attached']['library'][] = 'dgc_orgs/team-height';
  }
}

/**
 * After build callback for field_contact_section_block field.
 */
function _dgc_orgs_contact_section($form_element, FormStateInterface $form_state) {
  // Avoid option to delete all entity and not only reference.
  if (isset($form_element['entities'][0]['form']['delete'])) {
    $form_element['entities'][0]['form']['delete']['#access'] = FALSE;
  }
  return $form_element;
}

/**
 * Implements hook_ENTITY_TYPE_presave() for webform_submission.
 */
function dgc_orgs_webform_submission_presave(EntityInterface $entity) {
  /** @var \Drupal\group\Entity\GroupContent $source_entity */
  $source_entity = $entity->getSourceEntity();
  $type = $source_entity->getEntityTypeId();
  if ($type != 'group' && $type == 'group_content') {
    $gid = $source_entity->getGroup()->id();
    $entity->set('entity_type', 'group');
    $entity->set('entity_id', $gid);
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function dgc_orgs_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form["#webform_id"] == 'contact_w_crm' || $form["#webform_id"] == 'master_crm_contact') {
    // Adding validate to set values for fields depending on tokens.
    $form['#validate'][] = '_dgc_orgs_webform_set_items';
  }
}

/**
 * Validate callback for webform items to set tokens in non group pages.
 */
function _dgc_orgs_webform_set_items(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\webform\WebformSubmissionForm $wsf */
  $wsf = $form_state->getBuildInfo()["callback_object"];
  /** @var \Drupal\webform\Entity\WebformSubmission $submission */
  $submission = $wsf->getEntity();
  $source_entity = $submission->getSourceEntity();
  $type = $source_entity->getEntityTypeId();
  // If type is not group and is a group content page set values and tokens like an group.
  if ($type != 'group' && $type == 'group_content') {
    /** @var \Drupal\group\Entity\Group $group */
    $group = $source_entity->getGroup();
    $values = $form_state->getValues();
    if (!$group->get('field_crm_org_id')->isEmpty()) {
      if (isset($values['organization_id'])) {
        $form_state->setValue('organization_id', $group->get('field_crm_org_id')->getString());
      }
      if (isset($values['form_name'])) {
        $form_state->setValue('form_name', 'ContactUs' . $group->get('field_crm_org_id')->getString());
      }
    }
    if (isset($values['program_id'])) {
      /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $fs */
      $fs = $group->get('field_study')->referencedEntities();
      if (isset($fs[0]) && !$fs[0]->get('field_crm_program_id')->isEmpty()) {
        $form_state->setValue('program_id', $fs[0]->get('field_crm_program_id')->getString());
      }
    }
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function dgc_orgs_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  if ($entity_form['#entity_type'] == 'block_content' && $entity_form['#bundle'] == 'contact_medium') {
    // Set form settings always open and hide visibility form items.
    $entity_form['field_form']['widget'][0]['settings']['status']['#default_value'] = 'open';
    $entity_form['field_form']['widget'][0]['settings']['#access'] = FALSE;
    // Custom fields validation.
    $entity_form['#element_validate'][] = '_dgc_orgs_inline_entity_validate';
  }
}

/**
 * Validation callback.
 */
function _dgc_orgs_inline_entity_validate(&$entity_form, FormStateInterface $form_state) {
  $dc = $entity_form["#default_value"];
  $values = $form_state->getValues();
  $checked = FALSE;
  $form_program = FALSE;

  // Organization form.
  $contact_section = isset($values['field_contact_block']) ? $values['field_contact_block'] : [];
  // Program form.
  if (empty($contact_section) && isset($values['field_orgs']) && $values['field_orgs']) {
    $contact_section = $values['field_orgs'];
    $form_program = TRUE;
  }
  // About page form.
  elseif (empty($contact_section) && isset($values['field_contact_section_block']) && $values['field_contact_section_block']) {
    $contact_section = $values['field_contact_section_block'];
  }
  // Change the last class item to highlight the proper element.
  $field_phone_attr = $entity_form['field_phone'];
  end($field_phone_attr['#parents']);
  $key = key($field_phone_attr['#parents']);
  $field_phone_attr['#parents'][$key] = 'field_phone';
  $field_email_attr = $entity_form['field_email'];
  end($field_email_attr['#parents']);
  $key = key($field_email_attr['#parents']);
  $field_email_attr['#parents'][$key] = 'field_email';

  // If is a program form and the block is not created yet.
  if ($form_program && !$dc && isset($contact_section['form']['inline_entity_form']['field_contact_block']['form']['inline_entity_form'])) {
    $form_items = $contact_section['form']['inline_entity_form']['field_contact_block']['form']['inline_entity_form'];
    $phone = $form_items['field_phone'][0]['value'];
    $mail = $form_items['field_email'][0]['value'];
    $checked = TRUE;
  }
  // If is a program form and the block content is already created.
  elseif ($form_program && $dc && isset($contact_section['form']['inline_entity_form']['entities'])) {
    $contact_section["form"]["inline_entity_form"]["entities"][1]["form"]["field_contact_block"]["form"]["inline_entity_form"]["entities"][0]["form"]["field_phone"][0]["value"];
    foreach ($contact_section['form']['inline_entity_form']['entities'] as $entity) {
      if (isset($entity["form"]["field_contact_block"]["form"]["inline_entity_form"]["entities"][0]["form"])) {
        $form_items = $entity["form"]["field_contact_block"]["form"]["inline_entity_form"]["entities"][0]["form"];
        $phone = $form_items['field_phone'][0]['value'];
        $mail = $form_items['field_email'][0]['value'];
        $checked = TRUE;
      }
    }
  }
  // If is a organization form and the block is already created.
  elseif (!$form_program && $dc && isset($contact_section['form']['inline_entity_form']['entities'][0]['form'])) {
    $form_items = $contact_section['form']['inline_entity_form']['entities'][0]['form'];
    $phone = $form_items['field_phone'][0]['value'];
    $mail = $form_items['field_email'][0]['value'];
    $checked = TRUE;
  }
  // If is a organization form and the block is not created yet.
  elseif (!$form_program && !$dc && isset($contact_section['form']['inline_entity_form'])) {
    $form_items = $contact_section['form']['inline_entity_form'];
    $phone = $form_items['field_phone'][0]['value'];
    $mail = $form_items['field_email'][0]['value'];
    $checked = TRUE;
  }

  if ($checked && empty($phone) && empty($mail)) {
    $form_state->setError($field_phone_attr, t('You must have email or phone in contact section'));
    $form_state->setError($field_email_attr, t('You must have email or phone in contact section'));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dgc_orgs_preprocess_status_messages(&$variables) {
  $messages = $variables['message_list'];
  foreach ($messages as $type => $arr_messages) {
    foreach ($arr_messages as $key => $message) {
      // The "-wrapper" was removed to highlight the proper field but the message needs it for the anchor.
      if (!is_array($message)) {
        $string = [
          "-form-field-phone",
          "-form-field-email",
          "-field-optimize-gtm-id",
          "-field-optimize-ua-id"
        ];
        $new_string = [
          "-form-field-phone-wrapper",
          "-form-field-email-wrapper",
          "-field-optimize-gtm-id-wrapper",
          "-field-optimize-ua-id-wrapper"
        ];
        $msg = str_replace($string, $new_string, $message);
        $messages[$type][$key] = Markup::create($msg);
      }
    }
  }
  $variables['message_list'] = $messages;
}

/**
 * Validation callback to check logic with Google Optimize fields for groups.
 */
function _dgc_orgs_optimize_validate(array &$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $error_msg = t('Google Optimize requires both GTM and UA ID fields.');

  switch ($form['form_id']['#value']) {
    // Program/study forms.
    case 'group_study_add_form':
    case 'group_study_edit_form':
      if (isset($values["field_orgs"]["form"]["inline_entity_form"]["entities"])) {
        foreach ($values["field_orgs"]["form"]["inline_entity_form"]["entities"] as $key => $entity) {
          $form_items = $entity['form'];
          $gtm = $form_items["field_optimize_gtm_id"][0]["value"];
          $ua = $form_items["field_optimize_ua_id"][0]["value"];
          if ((!empty($gtm) && empty($ua)) || (empty($gtm) && !empty($ua))) {
            $form_state->setErrorByName('field_orgs][form][inline_entity_form][entities][' . $key . '][form][field_optimize_gtm_id', $error_msg);
            $form_state->setErrorByName('field_orgs][form][inline_entity_form][entities][' . $key . '][form][field_optimize_ua_id', $error_msg);
          }
        }
      }
      if (isset($values["field_orgs"]["form"]["inline_entity_form"]["field_optimize_gtm_id"]) && isset($values["field_orgs"]["form"]["inline_entity_form"]["field_optimize_ua_id"])) {
        $form_items = $values["field_orgs"]["form"]["inline_entity_form"];
        $gtm = isset($form_items["field_optimize_gtm_id"][0]["value"]) ? $form_items["field_optimize_gtm_id"][0]["value"] : '';
        $ua = isset($form_items["field_optimize_ua_id"][0]["value"]) ? $form_items["field_optimize_ua_id"][0]["value"] : '';
        if ((!empty($gtm) && empty($ua)) || (empty($gtm) && !empty($ua))) {
          $form_state->setErrorByName('field_orgs][form][inline_entity_form][field_optimize_gtm_id', $error_msg);
          $form_state->setErrorByName('field_orgs][form][inline_entity_form][field_optimize_ua_id', $error_msg);
        }
      }
      break;

    // Organizations form.
    case 'group_org_add_form':
    case 'group_org_edit_form':
      $gtm = $form_state->getValue('field_optimize_gtm_id')[0]['value'];
      $ua = $form_state->getValue('field_optimize_ua_id')[0]['value'];
      if ((!empty($gtm) && empty($ua)) || (empty($gtm) && !empty($ua))) {
        $form_state->setErrorByName('field_optimize_gtm_id', $error_msg);
        $form_state->setErrorByName('field_optimize_ua_id', $error_msg);
      }
      break;
  }
}
