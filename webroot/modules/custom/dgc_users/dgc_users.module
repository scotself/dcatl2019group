<?php

/**
 * @file
 * Contains dgc_users.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;
use Drupal\group\Entity\GroupInterface;

/**
 * Implements hook_help().
 */
function dgc_users_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dgc_users module.
    case 'help.page.dgc_users':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('dgc Users Customizations') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function dgc_users_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check for memberships on user edit.
  if ($form_id == 'user_form') {
    // Avoid users change their status and timezone.
    $current_user = \Drupal::currentUser();
    if ($current_user->id() == $form_state->getFormObject()->getEntity()->id()) {
      $form['account']['status']['#access'] = FALSE;
      $form['timezone']['#access'] = FALSE;
    }
    // Add send mail submit.
    array_unshift($form['actions']['submit']['#submit'], 'dgc_user_added_membership_user');
  }
  // Notify user on creation.
  if ($form_id == 'user_register_form') {
    $form['actions']['submit']['#submit'][] = 'dgc_user_added';
    $form['account']['notify']['#access'] = FALSE;
  }
  if (isset($form_state->getBuildInfo()['base_form_id']) && $form_state->getBuildInfo()['base_form_id'] == 'group_content_form') {
    $operation = $form_state->getFormObject()->getOperation();
    $plugin_id = $form_state->getFormObject()->getEntity()->getContentPlugin()->getPluginId();
    if ($plugin_id == 'group_membership' && $operation == 'add') {
      $form['actions']['submit']['#submit'][] = 'dgc_users_added_membership';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dgc_users_preprocess_status_messages(&$variables) {
  // Avoiding user create message from core.
  $regex = "/^Created a new user account for\s.*\sNo email has been sent.$/";
  $messages = $variables['message_list'];
  foreach ($messages as $type => $arr_messages) {
    foreach ($arr_messages as $key => $message) {
      if (!is_array($message) && preg_match($regex, $message)) {
        unset($messages[$type][$key]);
        break;
      }
    }
  }
  $variables['message_list'] = $messages;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dgc_users_group_content_update($entity) {
  if ($entity->getContentPlugin()->getPluginId() == 'group_membership') {
    $group = $entity->getGroup();
    $roles = dgc_users_get_roles_labels($entity->get('group_roles'));
    $user = $entity->entity_id->entity;
    _dgc_users_membership_mail($user, $group, $roles, 'changed_membership');
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function dgc_users_group_content_delete($entity) {
  if ($entity->getContentPlugin()->getPluginId() == 'group_membership') {
    $group = $entity->getGroup();
    $user = $entity->entity_id->entity;
    if ($user) {
      _dgc_users_membership_mail($user, $group, [], 'removed_membership');
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function dgc_users_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name == 'entity.user.canonical') {
    unset($data['tabs'][0]['devel.entities:group_content.devel_tab']);
    unset($data['tabs'][0]['devel.entities:group.devel_tab']);
    unset($data['tabs'][0]['dgc_users.group_content_my_account']);
    unset($data['tabs'][0]['dgc_users.group_my_account']);
    unset($data['tabs'][0]['dgc_users.group_content_logout']);
    unset($data['tabs'][0]['dgc_users.group_logout']);
    unset($data['tabs'][0]['dgc_users.group_dashboard']);
  }
  if ($route_name == 'view.manage_tenants.page_1') {
    unset($data['tabs'][0]['devel.entities:group.devel_tab']);
    unset($data['tabs'][0]['devel.entities:user.devel_tab']);
    unset($data['tabs'][0]['entity.webform_submission.user']);
    unset($data['tabs'][0]['dgc_users.user_dashboard']);
    unset($data['tabs'][0]['dgc_users.group_dashboard']);
    unset($data['tabs'][0]['dgc_users.group_content_logout']);
  }
}

/**
 * User add submit.
 */
function dgc_user_added(&$form, FormStateInterface $form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $group_content_field_value = $form_state->getValue('group_content');
  $message_sender = \Drupal::service('message_notify.sender');
  $entity_type_manager = \Drupal::entityTypeManager();
  $message_class = $entity_type_manager->getDefinition('message')->getClass();
  $message = $message_class::create(['template' => 'new_account', 'uid' => $user->id()]);

  $message->set('field_user', $user);
  $message->set('field_login_url', user_pass_reset_url($user));
  // Membership.
  if (isset($form_state->getStorage()['field_storage']['#parents']['#fields']['group_content']['gcontent'])) {
    $membership_info = [
      '#type' => 'container',
    ];
    $membership_info['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Memberships'),
    ];
    foreach ($form_state->getStorage()['field_storage']['#parents']['#fields']['group_content']['gcontent'] as $delta => $gcontent_field_value) {
      $membership = $gcontent_field_value['entity'];
      $group_name = $membership->getGroup()->label();
      $roles = dgc_users_get_roles_labels($group_content_field_value[$delta]['subform']['group_roles']);
      $membership_info[$delta] = [
        '#type' => 'container',
      ];
      $membership_info[$delta]['title'] = [
        '#type' => 'html_tag',
        '#tag' => 'h3',
        '#value' => $group_name,
      ];
      $membership_info[$delta]['roles'] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => implode(', ', $roles),
      ];
    }
    $message->set('field_memberships', render($membership_info));
  }
  // Saving and sending message.
  $message->save();
  $message_sender->send($message);
  // Site message.
  $messenger = \Drupal::messenger();
  $messenger->addMessage('Created new user account');
}

/**
 * User edit submit.
 */
function dgc_user_added_membership_user(&$form, FormStateInterface $form_state) {
  $user = $form_state->getFormObject()->getEntity();
  // Getting existing membership to compare later.
  $existing_memberships = [];
  foreach ($user->group_content->getValue() as $membership) {
    if (isset($membership['target_id'])) {
      $existing_memberships[] = $membership['target_id'];
    }
  }
  $group_content_field_value = $form_state->getValue('group_content');
  // This only causes a problem when no groups exist at all (early demos!)
  if (!isset($form_state->getStorage()['field_storage']['#parents']['#fields']['group_content']['gcontent'])) {
    return;
  }
  foreach ($form_state->getStorage()['field_storage']['#parents']['#fields']['group_content']['gcontent'] as $delta => $gcontent_field_value) {
    $membership = $gcontent_field_value['entity'];
    if ($gcontent_field_value['mode'] == 'removed' || in_array($membership->id(), $existing_memberships)) {
      continue;
    }
    $group = $membership->getGroup();
    $roles = dgc_users_get_roles_labels($group_content_field_value[$delta]['subform']['group_roles']);
    _dgc_users_membership_mail($user, $group, $roles, 'added_membership');
  }
}

/**
 * Membership added.
 */
function dgc_users_added_membership(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $user */
  if ($uid = $form_state->getValue('uid')) {
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
  }
  else {
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($form_state->getValue('entity_id')[0]['target_id']);
  }
  $roles = dgc_users_get_roles_labels($form_state->getValue('group_roles'));
  $group = $form_state->getFormObject()->getEntity()->getGroup();
  _dgc_users_membership_mail($user, $group, $roles, 'added_membership');
}

/**
 * Send user mails on membership changes.
 *
 * @param Drupal\user\UserInterface $user
 *   The user.
 * @param Drupal\group\Entity\GroupInterface $group
 *   The group.
 * @param array $roles
 *   Group roles.
 * @param string $template
 *   Message templates.
 */
function _dgc_users_membership_mail(UserInterface $user, GroupInterface $group, array $roles, $template) {
  if (\Drupal::moduleHandler()->moduleExists('message_notify')) {
    // Skipping roles.
    if (!dgc_users_notify_role($user)) {
      return;
    }

    $message_sender = \Drupal::service('message_notify.sender');
    $entity_type_manager = \Drupal::entityTypeManager();
    $message_class = $entity_type_manager->getDefinition('message')->getClass();
    $message = $message_class::create(['template' => $template, 'uid' => $user->id()]);

    // Getting group roles.
    if ($roles) {
      $message->set('field_roles', $roles);
    }
    $message->set('field_group', $group);
    $message->save();
    $message_sender->send($message);
  }
}

/**
 * Returns the roles labels.
 */
function dgc_users_get_roles_labels($roles = NULL) {
  if (!$roles) {
    return [];
  }
  $roles_names = [];
  if (is_array($roles)) {
    foreach ($roles as $role) {
      $role = \Drupal::entityTypeManager()->getStorage('group_role')->load($role['target_id']);
      $roles_names[] = $role->label();
    }
  }
  else {
    foreach ($roles->getIterator() as $role) {
      $roles_names[] = $role->entity->label();
    }
  }
  return $roles_names;
}

/**
 * Returns TRUE if user should be notified.
 */
function dgc_users_notify_role($user) {
  $user_roles = $user->getRoles(TRUE);
  $ignored_roles = [
    'developer',
    'administrator',
  ];
  if (in_array(reset($user_roles), $ignored_roles)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter() to user_login_form.
 */
function dgc_users_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#disable_inline_form_errors'] = TRUE;
  // Add login validation to check login error messages.
  $form["#validate"][] = '_dgc_users_validate_login';

  // Alter login form and add own custom redirect.
  $form['#submit'][] = '_dgc_users_user_login_form_submit';
}

/**
 * Validation callback to check validate messages.
 */
function _dgc_users_validate_login(&$form, FormStateInterface $form_state) {
  $changed = FALSE;
  if (($errors = $form_state->getErrors()) && !empty($errors['name'])) {
    $error = $errors['name']->getUntranslatedString();
    if ($error == 'Unrecognized username or password. <a href=":password">Forgot your password?</a>') {
      $errors['name'] = t('Invalid account details. Please try again or <a href=":password">reset your password.</a>', $errors['name']->getArguments());
      $changed = TRUE;
    }
  }
  if ($changed) {
    $form_state->clearErrors();
    foreach ($errors as $name => $error) {
      $form_state->setErrorByName($name, $error);
    }
  }
}

/**
 * Custom submit redirect for login form.
 */
function _dgc_users_user_login_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to user profile page..
  $form_state->setRedirect('user.page');
}
