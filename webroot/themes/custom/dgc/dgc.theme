<?php

/**
 * @file
 * Functions to support theming in the dgc theme.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_group_content().
 */
function dgc_preprocess_html(array &$vars) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  if ($group = \Drupal::routeMatch()->getParameter('group_revision')) {
    dgc_add_group_vars($vars, $group);
  }
  elseif ($group = \Drupal::routeMatch()->getParameter('group')) {
    dgc_add_group_vars($vars, $group);
  }
  // Check if we have group var. If we are on a Group or Group revision page.
  if ($group) {
    $vars['google_snippets_head'] = _dgc_google_snippets_head($group);
    $vars['google_snippets_body'] = _dgc_google_snippets_body($group);
  }
}

/**
 * Implements hook_preprocess_group_content().
 */
function dgc_preprocess_page__group(array &$vars) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  if ($group = \Drupal::routeMatch()->getParameter('group_revision')) {
    dgc_add_group_vars($vars, $group);
  }
  elseif ($group = \Drupal::routeMatch()->getParameter('group')) {
    dgc_add_group_vars($vars, $group);
  }
}

/**
 * Implements hook_preprocess_page__group_content().
 */
function dgc_preprocess_page__group_content(array &$vars) {
  /** @var \Drupal\group\Entity\GroupInterface $group */
  if ($group = \Drupal::routeMatch()->getParameter('group_revision')) {
    dgc_add_group_vars($vars, $group);
  }
  elseif ($group = \Drupal::routeMatch()->getParameter('group')) {
    dgc_add_group_vars($vars, $group);
  }
}

/**
 * Group theme vars.
 *
 * @param array $vars
 *   The group content theme vars.
 * @param object $group
 *   The parent group.
 */
function dgc_add_group_vars(array &$vars, $group) {
  if (is_numeric($group)) {
    $group = \Drupal::entityTypeManager()->getStorage('group')->load($group);
  }
  if ($group->bundle() == 'org') {
    $vars['group_header'] = dgc_build_group_header($group);
    $vars['group_footer'] = dgc_build_group_footer($group);
  }
}

/**
 * Build the group header from the logo, name and slogan.
 */
function dgc_build_group_header($group) {

  $group_home_page_path = $group->toUrl()->toString();

  // Logo Thumbnail.
  $thumb_style = ImageStyle::load('medium');
  // If Logo Field has data, get image url from media Entity Reference.
  if ($group->get('field_logo')->entity) {
    // Get Logo url from media entity.
    $logo_uri = $group->get('field_logo')->entity->get('field_media_image')->entity->uri->value;
    // Build thumbnail Url from file uri.
    $logo_thumb_url = $thumb_style->buildUrl($logo_uri);
    // Use thumbnail url to build the img tag.
    $logo_img = "<img src='$logo_thumb_url' />";
    // Wrap logo thumbnail in a link pointing to group homepage.
    $linked_logo = "<a class='logo' href='$group_home_page_path'>$logo_img</a>";
  }

  $group_header = "<header role='banner'>";
    $group_header .= "<div class='header-inner' data-sticky-container>";
    $group_header .= "<div class='header-sticky sticky' data-sticky data-options='marginTop:0;' data-sticky-on='small'>";
    $group_header .= "<div class='grid-container'>";
    $group_header .= "<div class='grid-x grid-padding-x'>";
      // Mobile header.
      $group_header .= "<div id='header-mobile' class='cell small-12 show-for-small-only' data-responsive-toggle='header-right'>";
        $group_header .= $linked_logo;
        $group_header .= "<button class='menu-icon' type='button' data-toggle='header-right'></button>";
      $group_header .= "</div>";

      // Desktop header.
      $group_header .= "<div id='header-left' class='cell medium-3 show-for-medium'>";
        $group_header .= "<div id='header-left-wrap' class='grid-x grid-padding-x'>";
          $group_header .= "<div class='cell medium-12'>";
            $group_header .= $linked_logo;
          $group_header .= "</div>";
        $group_header .= "</div>";
      $group_header .= "</div>";

      // Right side, with:
      $group_header .= "<div id='header-right' class='cell auto'>";
        $group_header .= "<div id='header-right-wrap' class='grid-x grid-padding-x'>";

          // Top (bottom on mobile): email, phone, login and language switcher
          $group_header .= "<div id='header-right-top' class='cell small-order-2 medium-order-1 flex-container flex-dir-column medium-flex-dir-row align-right'>";
            if (!$group->get('field_email')->isEmpty()) {
              $group_email = $group->get('field_email')->value;
              $group_linked_email = "<a href='mailto:$group_email'><i class='fi-mail'></i> $group_email</a>";
              $group_header .= "<div id='org-email'>$group_linked_email</div>";
            }
            if (!$group->get('field_phone')->isEmpty()) {
              $group_phone = $group->get('field_phone')->value;
              $group_phone_clean = preg_replace('/[^0-9]/', '', $group_phone);
              $group_linked_phone = "<a href='tel:$group_phone_clean'><i class='fi-telephone'></i> $group_phone</a>";
              $group_header .= "<div id='org-phone'>$group_linked_phone</div>";
            }
            if (!$group->get('field_login_link')->isEmpty()) {
              $group_header .= "<div id='header-login-link'>";
                $login_link = [
                  '#type' => 'link',
                  '#title' => $group->get('field_login_link')->title,
                  '#url' => Url::fromUri($group->get('field_login_link')->uri),
                ];
                $group_header .= " <span class='org-terms'>" . render($login_link) . "</span>";
              $group_header .= "</div>";
            }
            if ($block = \Drupal\block\Entity\Block::load('languageswitcher')) {
              $langswitch = \Drupal::entityTypeManager()
                ->getViewBuilder('block')
                ->view($block);
                $group_header .= render($langswitch);
            }
          $group_header .= "</div>";

          // Bottom (top on mobile): menu
          $group_header .= "<div id='header-right-bottom' class='cell small-order-1 medium-order-2 flex-container text-center flex-dir-column medium-flex-dir-row align-right'>";
            // Menu and CTA.
            $block = \Drupal\block\Entity\Block::load('groupmenus');
            $groupmenu = \Drupal::entityTypeManager()
              ->getViewBuilder('block')
              ->view($block);
            $group_header .= "<div id='group-main-menu'>" . render($groupmenu) . "</div>";
            if (!$group->get('field_header_cta')->isEmpty()) {
              $group_header .= "<div id='header-cta'>";
                $cta_link = [
                  '#type' => 'link',
                  '#title' => $group->get('field_header_cta')->title,
                  '#url' => Url::fromUri($group->get('field_header_cta')->uri),
                  '#attributes' => [
                    'class' => ['button', 'small'],
                  ],
                ];
                $group_header .= "<span class='org-cta'>" . render($cta_link) . "</span>";
              $group_header .= "</div>";
            }
          $group_header .= "</div>";

        $group_header .= "</div>";
      $group_header .= "</div>";

    $group_header .= "</div>";
    $group_header .= "</div>";
    $group_header .= "</div>";
    $group_header .= "</div>";
  $group_header .= "</header>";
  return $group_header;
}

/**
 * Build the group footer.
 */
function dgc_build_group_footer($group) {

  $group_home_page_path = $group->toUrl()->toString();
  $group_footer = '<footer>';

    // Footer 1.
    $group_footer .= '<div id="footer-1">';
      $group_footer .= '<div class="back-to-top"><i class="fas fa-chevron-up"></i></div>';
      $group_footer .= '<div class="grid-container">';
        // $group_footer .= '<a class="footer-scroll button" href="#top">â†‘</a>';
          $group_footer .= '<div class="grid-x grid-padding-x">';
          // Logo Thumbnail.
          $thumb_style = ImageStyle::load('medium');
          // If Logo Field has data, get image url from media Entity Reference.
          $linked_logo = '';
          if ($group->get('field_logo')->entity) {
            // Get Logo url from media entity.
            $logo_uri = $group->get('field_logo')->entity->get('field_media_image')->entity->uri->value;
            // Build thumbnail Url from file uri.
            $logo_thumb_url = $thumb_style->buildUrl($logo_uri);
            // Use thumbnail url to build the img tag.
            $logo_img = "<img src='$logo_thumb_url' />";
            // Wrap logo thumbnail in a link pointing to group homepage.
            $linked_logo = "<a href='$group_home_page_path'>$logo_img</a>";
          }
          $group_footer .= "<div class='cell small-11 medium-4 align-center org-logo'>$linked_logo</div>";
          $group_footer .= "<div class='cell small-11 medium-3 align-center org-menu'>";
            $block = \Drupal\block\Entity\Block::load('groupmenus');
            $groupmenu = \Drupal::entityTypeManager()
              ->getViewBuilder('block')
              ->view($block);
            $group_footer .= render($groupmenu);
          $group_footer .= "</div>";
          $group_footer .= "<div class='cell small-11 medium-5 align-center'>";
            if (!$group->get('field_email')->isEmpty()) {
              $group_email = $group->get('field_email')->value;
              $group_linked_email = "<a href='mailto:$group_email'><i class='fi-mail'></i> $group_email</a>";
              $group_footer .= "<div class='org-email'> $group_linked_email</div>";
            }
            if (!$group->get('field_phone')->isEmpty()) {
              $group_phone = $group->get('field_phone')->value;
              $group_phone_clean = preg_replace('/[^0-9]/', '', $group_phone);
              $group_linked_phone = "<a href='tel:$group_phone_clean'><i class='fi-telephone'></i> $group_phone</a>";
              $group_footer .= "<div class='org-phone'> $group_linked_phone</div>";
            }
            $fb = $tw = $yt = $ig = '';
            if (!$group->get('field_facebook')->isEmpty()) {
              $fb = "<a href='" . $group->get('field_facebook')->value . "'><i class='fab fa-facebook'></i></a>";
            }
            if (!$group->get('field_twitter')->isEmpty()) {
              $tw = "<a href='" . $group->get('field_twitter')->value . "'><i class='fab fa-twitter'></i></a>";
            }
            if (!$group->get('field_youtube')->isEmpty()) {
              $yt = "<a href='" . $group->get('field_youtube')->value . "'><i class='fab fa-youtube'></i></a>";
            }
            if (!$group->get('field_instagram')->isEmpty()) {
              $ig = "<a href='" . $group->get('field_instagram')->value . "'><i class='fab fa-instagram'></i></a>";
            }
            $group_footer .= "<div class='org-social'>";
              $group_footer .= $fb;
              $group_footer .= $tw;
              $group_footer .= $yt;
              $group_footer .= $ig;
            $group_footer .= "</div>";
          $group_footer .= "</div>";
        $group_footer .= "</div>";
      $group_footer .= "</div>";
    $group_footer .= "</div>";
  
    // Footer 2.
    $group_footer .= "<div id='footer-2'>";
      $group_footer .= "<div class='grid-container'>";
        $group_footer .= "<div class='grid-x'>";
          $group_footer .= "<div class='cell small-11 medium-8 align-center'>";
            if (!$group->get('field_footer_2_text')->isEmpty()) {
              $group_footer .= $group->get('field_footer_2_text')->value;
            }
          $group_footer .= "</div>";
          $group_footer .= "<div class='cell small-11 medium-4 align-center footer-2-logo'>";
            // Logo Thumbnail.
            $thumb_style = ImageStyle::load('medium');
            if ($group->get('field_footer_2_image')->entity) {
              // Get Logo url from media entity.
              $footer_2_img_uri = $group->get('field_footer_2_image')->entity->get('field_media_image')->entity->uri->value;
              // Build thumbnail Url from file uri.
              $footer_2_img_url = $thumb_style->buildUrl($footer_2_img_uri);
              // Use thumbnail url to build the img tag.
              $footer_2_img = "<img src='$footer_2_img_url' />";
              // Wrap logo thumbnail in a link pointing to group homepage.
              $linked_footer_2_img = "<a href='$group_home_page_path'>$footer_2_img</a>";
              $group_footer .= $linked_footer_2_img;
            }
          $group_footer .= "</div>";
        $group_footer .= "</div>";
      $group_footer .= "</div>";
    $group_footer .= "</div>";
  
    // Footer 3.
    $group_footer .= "<div id='footer-3'>";
      $group_footer .= "<div class='grid-container'>";
        $group_footer .= "<div class='grid-x align-center'>";
        if (!$group->get('field_footer_copyright')->isEmpty()) {
          $group_copyright = $group->get('field_footer_copyright')->value;
          $group_footer .= "<div class='org-copyright'>$group_copyright</div>";
        }
        // Menu.
        if ($group->get('field_privacy') || $group->get('field_terms_of_use')) {
          $links = [];
          if (!$group->get('field_privacy')->isEmpty()) {
            $privacy_link = [
              '#type' => 'link',
              '#title' => t('Privacy'),
              '#url' => Url::fromUserInput('/group/' . $group->id() . '/privacy'),
            ];
            $group_footer .= " <div class='org-privacy'>" . render($privacy_link) . "</div>";
          }
          if (!$group->get('field_terms_of_use')->isEmpty()) {
            $terms_link = [
              '#type' => 'link',
              '#title' => t('Terms'),
              '#url' => Url::fromUserInput('/group/' . $group->id() . '/terms'),
            ];
            $group_footer .= " <div class='org-terms'>" . render($terms_link) . "</div>";
          }
          $menu = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#items' => $links,
            '#attributes' => ['class' => 'group-footer-menu'],
          ];
          $group_footer .= render($menu);
        }
        $group_footer .= '</div>';
      $group_footer .= '</div>';
    $group_footer .= '</div>';
  $group_footer .= '</footer>';

  return $group_footer;
}

/*****************************
 *** PREPROCESS PARAGRAPHS ***
 *****************************/
/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph(array &$vars) {
  if ($vars['paragraph']->hasField('field_about_title_alignment')) {
    $vars['title_align'] = $vars['paragraph']->get('field_about_title_alignment')->value;
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__about(array &$vars) {
  if ($vars['paragraph']->hasField('field_home_about_layout'))
    $vars['layout'] = (int) $vars['paragraph']->get('field_home_about_layout')->value;
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__banner_item(array &$vars) {
  $img_field = $vars['paragraph']->field_bg_image->first();
  if (!empty($img_field)) {
    // Get entity reference.
    $entity_ref = $img_field->get('entity');
    // Get target.
    $entity_adapter = $entity_ref->getTarget();
    // Get the Media Entity.
    $media_entity = $entity_adapter->getValue();
    // Get img item.
    $img_item = $media_entity->get('field_media_image')->first();
    // Get image id.
    $image_file_id = $img_item->get('target_id')->getValue();
    // Load File entity.
    $image_file = File::load($image_file_id);
    $vars['bg_img'] = file_create_url($image_file->getFileUri());
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__faqs(array &$vars) {
  $vars['category_count'] = count($vars['content']['field_faq_categories']['#items']);
  $categories = $vars['content']['field_faq_categories']['#items'];
  $faqs = $qlist = [];

  $vars['node_title'] = $vars['paragraph']->getParentEntity()->get('title')->value;
  foreach ($categories as $delta => $category) {
    $category_name = $category->entity->get('field_faq_category')->value;
    $faqs[$category->entity->id()] = [
      'title' => $category_name,
      'faqs' => [],
    ];
    foreach ($category->entity->get('field_faqs') as $delta => $category_faqs) {
      $faqs[$category->entity->id()]['faqs'][$category_faqs->entity->id()] = [
        'q' => $category_faqs->entity->get('field_question')->value,
        'a' => $category_faqs->entity->get('field_answer')->value,
      ];
    }
  }
  $vars['faqs'] = $faqs;
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__getting_started(array &$vars) {
  $vars['has_items'] = !$vars['content']['field_steps'][0]['#paragraph']->get('field_getting_started_item_body')->isEmpty();
  // Add steps to get paragraph entities with all language values and not only the default language value.
  if ($vars['has_items']) {
    foreach ($vars['content']['field_steps'] as $key => $step) {
      if (is_numeric($key)) {
        $vars['steps'][] = $step['#paragraph'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__getting_started_slideshow(array &$vars) {
  $vars['has_items'] = !$vars['content']['field_step'][0]['#paragraph']->get('field_getting_started_item_body')->isEmpty();
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__home_other_section(array &$vars) {
  $vars['has_items'] = !$vars['content']['field_other']['#items']->isEmpty();
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__about_locations_team(array &$vars) {
  switch ($vars['view_mode']) {
    case 'simple_lists':
      // Locations variables.
      $locs_paragraph = $vars['elements']['field_about_locations']['#items'][0]->entity;
      /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
      $entity_repository = \Drupal::service('entity.repository');
      $locs_paragraph = $entity_repository->getTranslationFromContext($locs_paragraph);
      $vars['locs_title'] = $locs_paragraph->get('field_about_locations_title')->value;
      $vars['locs_title_align'] = $locs_paragraph->get('field_about_title_alignment')->value;
      $locs = $locs_paragraph->get('field_locations');
      $vars['locs_list'] = dgc_build_locations_list_markup($locs);

      // Team variables.
      $team_paragraph = $vars['elements']['field_about_team']['#items'][0]->entity;
      $team_paragraph = $entity_repository->getTranslationFromContext($team_paragraph);
      $vars['team_title'] = $team_paragraph->get('field_about_team_title')->value;
      $vars['team_title_align'] = $team_paragraph->get('field_about_title_alignment')->value;
      $team_members = $team_paragraph->get('field_about_team_member');
      // Variables for layout 1.
      $vars['team_list'] = dgc_build_team_members_list_markup($team_members);
      // Variables for layout 2.
      // First team member is assumed to be the one to be highlighted.
      $pi = $team_members->first();
      $img_field = $pi->entity->get('field_about_team_image')->first();
      if (!empty($img_field)) {
        // Get entity reference.
        $entity_ref = $img_field->get('entity');
        // Get target.
        $entity_adapter = $entity_ref->getTarget();
        // Get the Media Entity.
        $media_entity = $entity_adapter->getValue();
        // Get img item.
        $img_item = $media_entity->get('field_media_image')->first();
        // Get image id.
        $image_file_id = $img_item->get('target_id')->getValue();
        // Load File entity.
        $image_file = File::load($image_file_id);
        $vars['pi_img'] = ImageStyle::load('medium')->buildUrl($image_file->getFileUri());
      }
      break;

  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__about_locations(array &$vars) {
  // Adding alignment class to title.
  if ($vars['paragraph']->hasField('field_about_title_alignment')) {
    $title_alignment = $vars['paragraph']->get('field_about_title_alignment')->value;
    $vars['content']['field_about_locations_title'][0]['#attributes']['class'][] = 'text-' . $title_alignment;
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__about_team(array &$vars) {
  // Adding alignment class to title.
  if ($vars['paragraph']->hasField('field_about_title_alignment')) {
    $title_alignment = $vars['paragraph']->get('field_about_title_alignment')->value;
    $vars['content']['field_about_locations_title'][0]['#attributes']['class'][] = 'text-' . $title_alignment;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dgc_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Provide suggestions for block templates by bundle and view mode.
  //@todo: find out why we are getting this index 0 array?
  if (!empty($variables['elements']['content'][0]['#block_content'])) {
    $block = $variables['elements']['content'][0]['#block_content'];
    // Add `block--BUNDLE.html.twig`.
    $suggestions[] = 'block__' . $block->bundle();
    $view_mode = $variables['elements']['#configuration']['formatter']['settings']['view_mode'];
    if (!empty($view_mode)) {
      // Add `block--BUNDLE--VIEW-MODE.html.twig`.
      $suggestions[] = 'block__' . $block->bundle() . '__' . $view_mode;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dgc_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if (end($path_args) == 'privacy' || end($path_args) == 'terms') {
    $suggestions[] = 'page__group__org__terms_privacy';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dgc_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#field_name'] == 'field_contact_section_block') {
    $block_view_mode = $variables['element']['#items']->first()->entity->bundle();
    $suggestions[] = 'field__field_' . $block_view_mode . '_block';
  }
}

/*************************************************
 *** PREPROCESS CUSTOM BLOCKS (LAYOUT BUILDER) ***
 *************************************************/
/**
 * Implements hook_preprocess_block__inline_block__TYPE().
 * For a custom block of type banner created from layout builder.
 */
function dgc_preprocess_block__inline_block__banner(array &$vars) {
  $img_field = $vars['content']['#block_content']->field_bg_image->first();
  if (!empty($img_field)) {
    // Get entity reference.
    $entity_ref = $img_field->get('entity');
    // Get target.
    $entity_adapter = $entity_ref->getTarget();
    // Get the Media Entity.
    $media_entity = $entity_adapter->getValue();
    // Get img item.
    $img_item = $media_entity->get('field_media_image')->first();
    // Get image id.
    $image_file_id = $img_item->get('target_id')->getValue();
    // Load File entity.
    $image_file = File::load($image_file_id);
    $vars['bg_img'] = file_create_url($image_file->getFileUri());
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_block__inline_block__image_slideshow(array &$vars) {
  $vars['slides'] = [];
  foreach ($vars['content']['#block_content']->field_images as $delta => $image) {
    // Get entity reference.
    $entity_ref = $image->get('entity');
    // Get target.
    $entity_adapter = $entity_ref->getTarget();
    // Get the Media Entity.
    $media_entity = $entity_adapter->getValue();
    // Check if image field is not empty.
    // Probably field_media_image is required and this check could be removed?
    if (!$media_entity->get('field_media_image')->isEmpty()) {
      // Get first item in array.
      $img_item = $media_entity->get('field_media_image')->first();
      // Set vars from image item values.
      $vars['slides'][$delta]['title'] = $img_item->get('title')->getValue();
      $vars['slides'][$delta]['alt'] = $img_item->get('alt')->getValue();
    }

    $image_file_id = $img_item->get('target_id')->getValue();
    $image_file = File::load($image_file_id);
    $vars['slides'][$delta]['url'] = file_create_url($image_file->getFileUri());
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_block__inline_block__accordion_tabs(array &$vars) {
  $vars['tab_items'] = [];
  foreach ($vars['content']['#block_content']->field_accordion_tab_items as $tab_item) {
    $vars['tab_items'][] = $tab_item->view();
  }
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_block__inline_block__slideshow(array &$vars) {
  $vars['banners'] = [];
  foreach ($vars['content']['#block_content']->field_slides as $banner) {
    $vars['banners'][] = $banner->view();
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function dgc_preprocess_mimemail_messages(array &$vars) {
  global $base_url;
  $vars['base_url'] = $base_url;
}

/**
 * Implements theme_status_messages().
 */
function dgc_status_messages($vars) {
  $display = $vars['message_list'];
  $output = '';

  $status_heading = [
    'error' => t('Error message'),
    'status' => t('Status message'),
    'warning' => t('Warning message'),
  ];

  $status_mapping = [
    'error' => 'alert',
    'status' => 'success',
    'warning' => 'secondary',
  ];

  foreach ($display as $type => $messages) {
    if (isset($status_mapping[$type])) {
      $output .= "<div class=\"callout $status_mapping[$type]\" data-closable=\"fade-out\">\n";
    }
    else {
      $output .= "<div class=\"callout\" data-closable=\"fade-out\">\n";
    }
    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="visually-hidden">' . $status_heading[$type] . "</h2>\n";
    }
    if (count($messages) > 1) {
      foreach ($messages as $message) {
        $output .= '<p>' . $message . '</p>';
      }
    }
    else {
      $output .= $messages[0];
    }
    $output .= "</div>\n";
  }

  $output = [
    '#markup' => $output,
    '#allowed_tags' => [
      'div',
      'button',
      'a',
      'span',
      'h2',
      'p',
      'ul',
      'li',
      'ol',
    ],
  ];
  $output = render($output);

  return $output;
}

/**
 * Given a group, look for both GTM ID needed for the regular GTM snippet and
 * the 2 IDs needed for Google Optimize snippet and assemble them into a single
 * string to insert into the page for tracking all the things.
 */
function _dgc_google_snippets_head($group) {
  $snippets = '';
  $optimize_ids = _dgc_get_optimize_ids($group);
  if (!empty($optimize_ids)) $snippets .= _dgc_google_optimize_snippet($optimize_ids['gtm'], $optimize_ids['ua']);
  if ($gtm_id = _dgc_get_gtm_id($group)) $snippets .= _dgc_gtm_snippet_head($gtm_id);
  return !empty($snippets) ? $snippets : FALSE;
}

/**
 * Same as above, just only include snippets that go just inside the body tag.
 */
function _dgc_google_snippets_body($group) {
  $snippets = '';
  if ($gtm_id = _dgc_get_gtm_id($group)) $snippets .= _dgc_gtm_snippet_body($gtm_id);
  return !empty($snippets) ? $snippets : FALSE;
}

/**
 * Get the GTM ID from a group. If group is an org and does not have a GTM ID,
 * check the Org's parent study.
 */
function _dgc_get_gtm_id($group) {
  $gtm_id = FALSE;
  // Get GTM ID from either Org or it's parent Program.
  if ($group->get('field_gtm_id')->value) {
    $gtm_id = $group->get('field_gtm_id')->value;
  }
  elseif ($group->hasField('field_study') && $group->get('field_study')->entity && !$group->get('field_study')->entity->get('field_gtm_id')->isEmpty) {
    $gtm_id = $group->get('field_study')->entity->get('field_gtm_id')->value;
  }
  return $gtm_id;
}

/**
 * Stick group's GTM ID into the necessary snippet to be inserted into the page.
 */
function _dgc_gtm_snippet_head($gtm_id) {
  return "
    <!-- Google Tag Manager -->
    <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','{$gtm_id}');</script>
    <!-- End Google Tag Manager -->";
}

function _dgc_gtm_snippet_body($gtm_id) {
  return "<!-- Google Tag Manager (noscript) -->
    <noscript><iframe src='https://www.googletagmanager.com/ns.html?id={$gtm_id}'
    height='0' width='0' style='display:none;visibility:hidden'></iframe></noscript>
    <!-- End Google Tag Manager (noscript) -->";
}

/**
 * Check the group for google optimize IDs. If an Org and it doesn't have one,
 * check its parent Study.
 */
function _dgc_get_optimize_ids($group) {
  $optimize_ids = [];
  // Get Optimize GTM ID from the Org or Study directly if it has one.
  if ($group->get('field_optimize_gtm_id')->value) {
    $optimize_ids['gtm'] = $group->get('field_optimize_gtm_id')->value;
  }
    // Without the UA ID (should be impossible, but just in case),
    // no optimize stuff should be included.
  if ($group->get('field_optimize_ua_id')->value) {
    $optimize_ids['ua'] = $group->get('field_optimize_ua_id')->value;
  }
  // Group doesn't have both Optimize IDS. For Orgs (field_study), check the study/program.
  if (empty($optimize_ids) && $group->hasField('field_study') && $group->get('field_study')->entity) {
    $study = $group->get('field_study')->entity;
    if ($study->get('field_optimize_gtm_id')->value) {
      $optimize_ids['gtm'] = $study->get('field_optimize_gtm_id')->value;
      // Without the UA ID (should be impossible, but just in case),
      // no optimize stuff should be included.
      if ($study->get('field_optimize_ua_id')->value) {
        $optimize_ids['ua'] = $study->get('field_optimize_ua_id')->value;
      }
    }
  }

  return $optimize_ids;
}

/**
 * Stick a group's Optimize GTM ID and UA ID into the snippet to insert into the
 * page. If the group is an org and doesn't have these, check the parent Study.
 */
function _dgc_google_optimize_snippet($gtm_id, $ua_id) {
  return "
  <!-- Global site tag (gtag.js) - Google Analytics start -->
    <style>.async-hide { opacity: 0 !important}</style>
    <script> (function(a,s,y,n,c,h,i,d,e){s.className+=' '+y;h.start=1*new Date; h.end=i=function()
      {s.className=s.className.replace(RegExp(' ?'+y),'')};
      (a[n]=a[n]||[]).hide=h;setTimeout(function()
      {i();h.end=null},c);h.timeout=c;})(window,document.documentElement,'async-hide','dataLayer',4000,
      {'{$gtm_id}':true});
    </script>
    <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function()
      { (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
      ga('create', '{$ua_id}', 'auto',
      {allowLinker: true});
      ga('require', '{$gtm_id}');
    </script>
  <!-- Global site tag (gtag.js) - Google Analytics end -->";
}

function dgc_build_locations_list_markup($locs) {
  $locs_markup = '';
  foreach ($locs as $loc) {
    $address = $loc->entity->get('field_location_address');
    $locs_markup .= '<div class="loc_wrap">';
    $locs_markup .= '<h3 class="loc_name">' . $address->organization . '</h3>';
    $locs_markup .= '<div class="loc_info">';
    $locs_markup .= !empty($address->address_line1) ? $address->address_line1 : '';
    $locs_markup .= !empty($address->address_line2) ? ', ' . $address->address_line2 : '';
    $locs_markup .= !empty($address->locality) ? ', ' . $address->locality : '';
    $locs_markup .= !empty($address->administrative_area) ? ', ' . $address->administrative_area : '';
    $locs_markup .= !empty($address->postal_code) ? ' ' . $address->postal_code : '';
    $locs_markup .= '</div>';
    $locs_markup .= '</div>';
  }
  return $locs_markup;
}

function dgc_build_team_members_list_markup($team_members) {
  $team_members_markup = '';
  foreach ($team_members as $team_member) {
    $team_members_markup .= '<div class="team_member_wrap">';
    if ($team_member->entity->get('field_team_member_profile')->first()) {
      $team_member_link = $team_member->entity->get('field_team_member_profile')->first()->getUrl()->toString();
      $link_markup = '<a target="_blank" href="' . $team_member_link . '"><i class="fas fa-external-link-alt"></i></a>';
      $team_members_markup .= '<h3 class="team_member_name">' . $team_member->entity->get('field_about_team_name')->value . $link_markup . '</h3>';
    }
    else {
      $team_members_markup .= '<h3 class="team_member_name">' . $team_member->entity->get('field_about_team_name')->value . '</h3>';
    }
    if ($team_member_title = $team_member->entity->get('field_team_member_title')->value) {
      $team_members_markup .= '<div class="team-member-title">' . $team_member_title . '</div>';
    }
    $team_members_markup .= '</div>';
  }
  return $team_members_markup;
}

function dgc_build_team_member_pi_markup($pi) {
  $pi_markup = '';
  $pi_markup .= '<div class="team-member-wrap pi">';
  $pi_markup .= '<h5 class="team-member-name pi">' . $pi->entity->get('field_about_team_name')->value . '</h5>';
  $pi_markup .= '<div class="team-member-title pi">';
  $pi_title = $pi->entity->get('field_team_member_title')->value;
  if ($pi->entity->get('field_team_member_profile')->first()) {
    $pi_link = $pi->entity->get('field_team_member_profile')->first()->getUrl()->toString();
    $pi_markup .= "<a class='team-member-link pi' target='_blank' href='$pi_link'>$pi_title</a>";
  } else {
    $pi_markup .= $pi_title;
  }
  $pi_markup .= '</div>';
  $pi_markup .= '</div>';
  return $pi_markup;
}
