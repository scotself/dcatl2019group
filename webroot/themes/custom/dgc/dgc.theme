<?php

/**
 * @file
 * Functions to support theming in the dgc theme.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;
use Drupal\Core\Url;

/*****************************
 *** PREPROCESS PARAGRAPHS ***
 *****************************/
/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__1_column_section(array &$vars) {

}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__2_column_section(array &$vars) {

  $vars['columnsizing'] = $vars['paragraph']->get('field_column_sizing_2col')->value;

  switch ($vars['columnsizing']) {
    case 5050:
      $vars['col1class'] = 'small-12 medium-6';
      $vars['col2class'] = 'small-12 medium-6';
      break;
    case 7525:
      $vars['col1class'] = 'small-12 medium-9';
      $vars['col2class'] = 'small-12 medium-3';
      break;
    case 2575:
      $vars['col1class'] = 'small-12 medium-3';
      $vars['col2class'] = 'small-12 medium-9';
      break;
    case 3367:
      $vars['col1class'] = 'small-12 medium-4';
      $vars['col2class'] = 'small-12 medium-8';
      break;
    case 6733:
      $vars['col1class'] = 'small-12 medium-8';
      $vars['col2class'] = 'small-12 medium-4';
      break;
  }

}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__3_column_section(array &$vars) {

  $vars['columnsizing'] = $vars['paragraph']->get('field_column_sizing_3col')->value;

  switch ($vars['columnsizing']) {
    case 333333:
      $vars['col1class'] = 'small-12 medium-4';
      $vars['col2class'] = 'small-12 medium-4';
      $vars['col3class'] = 'small-12 medium-4';
      break;
    case 502525:
      $vars['col1class'] = 'small-12 medium-6 large-6';
      $vars['col2class'] = 'small-12 medium-6 large-3';
      $vars['col3class'] = 'small-12 medium-6 large-3';
      break;
    case 255025:
      $vars['col1class'] = 'small-12 medium-3';
      $vars['col2class'] = 'small-12 medium-6';
      $vars['col3class'] = 'small-12 medium-3';
      break;
    case 252550:
      $vars['col1class'] = 'small-12 medium-6 large-3';
      $vars['col2class'] = 'small-12 medium-6 large-3';
      $vars['col3class'] = 'small-12 medium-6 large-6';
      break;
  }

}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__4_column_section(array &$vars) {

  $vars['columnsizing'] = $vars['paragraph']->get('field_column_sizing_4col')->value;
  // For now, since there is only one proposed 4-column layout, just set them all to small-3.
  $vars['col1class'] = $vars['col2class'] = $vars['col3class'] = $vars['col4class'] = 'small-12 medium-6 large-3';

}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__cta(array &$vars) {
  $vars['url'] = $vars['paragraph']->get('field_cta')->uri;
  $vars['text'] = $vars['paragraph']->get('field_cta')->title;
  $bg = $text = '';
  if (!$vars['paragraph']->get('field_cta_button_color')->isEmpty()) {
    $bg .="background-color: " . $vars['paragraph']->get('field_cta_button_color')->color . ";";
  }
  if (!$vars['paragraph']->get('field_cta_button_text_color')->isEmpty()) {
    $text .= "color: " . $vars['paragraph']->get('field_cta_button_text_color')->color . ";";
  }
  $vars['style'] = !empty($bg) && !empty($text) ? "style='$bg $text'" : '';
  $vars['align'] = $vars['paragraph']->get('field_position')->value;
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 */
function dgc_preprocess_paragraph__banner_item(array &$vars) {
  $img_field = $vars['paragraph']->field_bg_image->first();
  if (!empty($img_field)) {
    // Get entity reference.
    $entity_ref = $img_field->get('entity');
    // Get target.
    $entity_adapter = $entity_ref->getTarget();
    // Get the Media Entity.
    $media_entity = $entity_adapter->getValue();
    // Get img item.
    $img_item = $media_entity->get('field_media_image')->first();
    // Get image id.
    $image_file_id = $img_item->get('target_id')->getValue();
    // Load File entity.
    $image_file = File::load($image_file_id);
    $vars['bg_img'] = file_create_url($image_file->getFileUri());
  }
}

/**
 * Implements theme_status_messages().
 */
function dgc_status_messages($vars) {
  $display = $vars['message_list'];
  $output = '';

  $status_heading = [
    'error' => t('Error message'),
    'status' => t('Status message'),
    'warning' => t('Warning message'),
  ];

  $status_mapping = [
    'error' => 'alert',
    'status' => 'success',
    'warning' => 'secondary',
  ];

  foreach ($display as $type => $messages) {
    if (isset($status_mapping[$type])) {
      $output .= "<div class=\"callout $status_mapping[$type]\" data-closable=\"fade-out\">\n";
    }
    else {
      $output .= "<div class=\"callout\" data-closable=\"fade-out\">\n";
    }
    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="visually-hidden">' . $status_heading[$type] . "</h2>\n";
    }
    if (count($messages) > 1) {
      foreach ($messages as $message) {
        $output .= '<p>' . $message . '</p>';
      }
    }
    else {
      $output .= $messages[0];
    }
    $output .= "</div>\n";
  }

  $output = [
    '#markup' => $output,
    '#allowed_tags' => [
      'div',
      'button',
      'a',
      'span',
      'h2',
      'p',
      'ul',
      'li',
      'ol',
    ],
  ];
  $output = render($output);

  return $output;
}
