{"version":3,"file":"css-vars-ponyfill.esm.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.6.1\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function isValidCss() {\n        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var isHTML = cssText.trim().charAt(0) === \"<\";\n        return !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isCrossDomain = parser.host !== location.host;\n        var isIElte9 = document.all && !window.atob;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && isIElte9) {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    if (isValidCss(xdr.responseText)) {\n                        onSuccess(xdr.responseText, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach(function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {\n                        return rule.cssText;\n                    }).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced  from 'balanced-match';\nimport mergeDeep from './merge-deep';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS stringt to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.onlyVars=false] Remove declarations that do not\n *                  contain a CSS variable from the return value. Note that\n *                  @font-face and @keyframe rules require all declarations to\n *                  be returned if a CSS variable is used.\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object.\n * @returns {object}\n */\nfunction cssParse(css, options = {}) {\n    const defaults = {\n        onlyVars      : false,\n        removeComments: false\n    };\n    const settings = mergeDeep(defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            return m[0]\n                .trim() // remove all comments from selectors\n                .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n                .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                })\n                .split(/\\s*(?![^(]*\\)),\\s*/)\n                .map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret = at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x();\n\n            if (ret && settings.onlyVars) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (settings.onlyVars) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // When onlyVars:true, skip rulset if it does not contain a :root\n            // variable declaration of a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = balancedMatch.pre.indexOf(':root') !== -1 && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = !settings.onlyVars ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => s.indexOf(':root') !== -1) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\nconst variableStore       = {\n    // Persisted custom property values (matches modern browsers)\n    dom : {},\n    // Non-persisted custom properties values\n    temp: {},\n    // Persisted custom property values passed using options.variables\n    user: {}\n};\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=false] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : false,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const settings = mergeDeep(defaults, options);\n    const map      = settings.persist ? variableStore.dom : variableStore.temp = JSON.parse(JSON.stringify(variableStore.dom));\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText, {\n        onlyVars: settings.onlyVars\n    });\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Restore persisted user values\n    Object.keys(variableStore.user).forEach(key => {\n        map[key] = variableStore.user[key];\n    });\n\n    // Handle variables defined in settings.variables\n    if (Object.keys(settings.variables).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(settings.variables).forEach(key => {\n            // Convert all property names to leading '--' style\n            const prop  = `--${key.replace(/^-+/, '')}`;\n            const value = settings.variables[key];\n\n            // Persist settings.variables values\n            if (settings.persist) {\n                variableStore.user[prop] = value;\n            }\n\n            // Update map value with settings.variables value\n            if (map[prop] !== value) {\n                map[prop] = value;\n\n                // Add new declaration to newRule\n                newRule.declarations.push({\n                    type    : 'declaration',\n                    property: prop,\n                    value   : value\n                });\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve && newRule.declarations.length) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== decl.value) {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolves CSS var() function(s) with `map` data or fallback value(s). Returns\n * original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} map CSS custom property key/values\n * @param {object} settings Settings object passed from transformVars()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a map or fallback value. Allows restoring\n *                 original var() function from recursive resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to map or fallback\n *                  value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, map, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData    = balanced('(', ')', value);\n    const warningIntro = 'CSS transform warning:';\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => map['--x'] or map['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when map['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0];\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = map.hasOwnProperty(name) ? String(map[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, map, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, map, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, map, settings)})`\n            + resolveValue(valueData.post, map, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\nexport { variableStore };","// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport mergeDeep           from './merge-deep';\nimport transformCss        from './transform-css';\nimport { variableStore }   from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst defaults = {\n    // Sources\n    rootElement  : isBrowser ? document : null,\n    include      : 'style,link[rel=stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, parseCSS\n    preserve     : false, // transformCss\n    shadowDOM    : false, // cssVars\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    updateURLs   : true,  // cssVars\n    variables    : {},    // transformCss\n    watch        : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes (@keyframes & @-VENDOR-keyframes)\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS root vars\n    cssRootRules: /(?::root\\s*{\\s*[^}]*})/g,\n    // CSS url(...) values\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS variable :root declarations and var() function values\n    cssVars: /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\n\n// Mutation observer referece created via options.watch\nlet cssVarsObserver  = null;\n\n// Indicates if document-level custom property values have been parsed, stored,\n// and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls.\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) a reference to\n *                   the appended <style> node, and 3) an object containing all\n *                   custom properies names and values.\n *\n * @example\n *\n *   cssVars({\n *     rootElement  : document,\n *     include      : 'style,link[rel=\"stylesheet\"]',\n *     exclude      : '',\n *     fixNestedCalc: true,\n *     onlyLegacy   : true,\n *     onlyVars     : false,\n *     preserve     : false,\n *     shadowDOM    : false,\n *     silent       : false,\n *     updateDOM    : true,\n *     updateURLs   : true,\n *     variables    : {\n *       // ...\n *     },\n *     watch        : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings    = mergeDeep(defaults, options);\n    const styleNodeId = pkgName;\n\n    // Always exclude styleNodeId element, which is the generated <style> node\n    // containing previously transformed CSS.\n    settings.exclude = `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : '');\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const isShadowElm = settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host;\n\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    // Convert all property names to leading '--' style\n                    const prop  = `--${key.replace(/^-+/, '')}`;\n                    const value = settings.variables[key];\n\n                    targetElm.style.setProperty(prop, value);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (isShadowElm && !isShadowDOMReady) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    const cssRootDecls = (cssText.match(regex.cssRootRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssRootDecls || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Transform CSS, which stores custom property values from\n                    // cssText in variableStore. This step ensures that\n                    // variableStore contains all document-level custom property\n                    // values for subsequent ponyfill calls.\n                    transformCss(cssText, {\n                        persist: true\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Add / recreate MutationObserver\n            if (settings.watch) {\n                addMutationObserver(settings, styleNodeId);\n            }\n            // Disconnect existing\n            else if (settings.watch === false && cssVarsObserver) {\n                cssVarsObserver.disconnect();\n            }\n\n            getCssData({\n                rootElement: settings.rootElement,\n                include: settings.include,\n                exclude: settings.exclude,\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter: settings.onlyVars ? regex.cssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        const cssUrls = cssText\n                            // Remove comments to avoid processing @import in comments\n                            .replace(regex.cssComments, '')\n                            // Match url(...) values\n                            .match(regex.cssUrls) || [];\n\n                        cssUrls.forEach(cssUrl => {\n                            const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n                            const newUrl = getFullUrl(oldUrl, url);\n\n                            cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n                        });\n                    }\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    const cssMarker = /\\/\\*__CSSVARSPONYFILL-(\\d+)__\\*\\//g;\n                    let   styleNode = null;\n\n                    // Concatenate cssArray items, replacing those that do not\n                    // contain a CSS custom property declaraion or function with\n                    // a temporary marker . After the CSS is transformed, the\n                    // markers will be replaced with the matching cssArray item.\n                    // This optimization is done to avoid processing CSS that\n                    // will not change as a results of the ponyfill.\n                    cssText = cssArray.map((css, i) => regex.cssVars.test(css) ? css : `/*__CSSVARSPONYFILL-${i}__*/`).join('');\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        const hasKeyframes = regex.cssKeyframes.test(cssText);\n\n                        // Replace markers with appropriate cssArray item\n                        cssText = cssText.replace(cssMarker, (match, group1) => cssArray[group1]);\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = settings.rootElement.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode && lastNode.parentNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n\n                            if (hasKeyframes) {\n                                fixKeyframes(settings.rootElement);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    // Process shadow DOM\n                    if (settings.shadowDOM) {\n                        const elms = [\n                            settings.rootElement,\n                            ...settings.rootElement.querySelectorAll('*')\n                        ];\n\n                        // Iterates over all elements in rootElement and calls\n                        // cssVars on each shadowRoot, passing document-level\n                        // custom properties as options.variables.\n                        for (let i = 0, elm; (elm = elms[i]); ++i) {\n                            if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                const shadowSettings = mergeDeep(settings, {\n                                    rootElement: elm.shadowRoot,\n                                    variables  : variableStore.dom\n                                });\n\n                                cssVars(shadowSettings);\n                            }\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode, JSON.parse(JSON.stringify(settings.updateDOM ? variableStore.dom : variableStore.temp)));\n                }\n            });\n        }\n\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n * @param {string} ignoreId\n */\nfunction addMutationObserver(settings, ignoreId) {\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    const isLink  = node => node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n    const isStyle = node => node.tagName === 'STYLE' && (ignoreId ? node.id !== ignoreId : true);\n\n    let debounceTimer = null;\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n    }\n\n    settings.watch = defaults.watch;\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        let isUpdateMutation = false;\n\n        mutations.forEach(mutation => {\n            if (mutation.type === 'attributes') {\n                isUpdateMutation = isLink(mutation.target) || isStyle(mutation.target);\n            }\n            else if (mutation.type === 'childList') {\n                const addedNodes   = Array.apply(null, mutation.addedNodes);\n                const removedNodes = Array.apply(null, mutation.removedNodes);\n\n                isUpdateMutation = [].concat(addedNodes, removedNodes).some(node => {\n                    const isValidLink  = isLink(node) && !node.disabled;\n                    const isValidStyle = isStyle(node) && !node.disabled && regex.cssVars.test(node.textContent);\n\n                    return (isValidLink || isValidStyle);\n                });\n            }\n\n            if (isUpdateMutation) {\n                clearTimeout(debounceTimer);\n\n                debounceTimer = setTimeout(function() {\n                    cssVars(settings);\n                }, 1);\n            }\n        });\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['disabled', 'href'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","isValidCss","cssText","isHTML","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","String","isCrossDomain","host","location","isIElte9","all","window","atob","isSameProtocol","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","join","handleSuccess","cssIndex","sourceUrl","Boolean","resolveImports","resolvedCssText","errorData","data","test","parseImportData","baseUrl","ignoreRules","importData","rules","replace","match","rule","absoluteUrls","getFullUrl","absoluteRules","oldUrl","newUrl","callbackFn","__errorData","__errorRules","responseImportData","push","responseArray","importText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","key","pVal","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","defaults","onlyVars","removeComments","errors","error","msg","Error","re","exec","close","whitespace","comment","type","comments","cmnts","c","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_fontface","at_supports","supports","at_host","at_media","media","at_custom_m","at_document","at_x","at_rule","hasVarFunc","some","decl","arr","balancedMatch","hasVarDecl","core","stylesheet","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","variableStore","dom","temp","user","transformVars","fixNestedCalc","persist","preserve","variables","onWarning","JSON","parse","stringify","cssTree","parseCss","varNameIndices","splice","newRule","resolvedValue","resolveValue","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","__recursiveFallback","valueData","warningIntro","resolveFunc","fallback","hasOwnProperty","replacement","unresolvedFallback","isEmptyVarFunc","isBrowser","isNativeSupport","CSS","onlyLegacy","shadowDOM","silent","updateDOM","updateURLs","watch","cssKeyframes","cssRootRules","cssUrls","cssVars","cssVarsObserver","isShadowDOMReady","styleNodeId","pkgName","handleError","message","sourceNode","handleWarning","warn","isShadowElm","shadowRoot","targetElm","documentElement","style","setProperty","cssRootDecls","nodeArray","transformCss","addMutationObserver","disconnect","cssUrl","responseUrl","responseURL","statusText","errorMsg","cssMarker","styleNode","hasKeyframes","group1","lastNode","querySelector","nextSibling","parentNode","insertBefore","fixKeyframes","errorThrown","errorNode","elms","shadowSettings","addEventListener","init","evt","removeEventListener","ignoreId","MutationObserver","tagName","id","debounceTimer","mutations","isUpdateMutation","mutation","target","addedNodes","removedNodes","isValidLink","disabled","isValidStyle","clearTimeout","observe","attributes","attributeFilter","childList","subtree","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","nameMarker","len","animationName","offsetHeight","nodeStyle"],"mappings":"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"}